#!/bin/bash
#
# drdbs - dctr's rdiff-backup script
# Please report issues to David Christ <david.christ@uni-trier.de>.


# TODO: Search default path's: /etc, /usr/etc, /usr/local/etc
ETC="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )/../etc/"

# Defaults
LOGFILE="/tmp/drdbs.log"

# Overwrite defauts from config.
source $ETC/drdbs.conf || exitOnErr 2
EXCLUDEFILE="$ETC/drdbs.exclude"


# Go

# Method that is called if an error occurs. $1 is the exit code of the program that ran last.
exitOnErr() {
	# TODO: Mail output
	cp $LOGFILE "~/drdbs_failed_$(date +%Y-%m-%d_%H:%M:%S).log"
	exit $1
}


echo "========================================================================" &> $LOGFILE
echo " Backup created at `date` using rdiff-backup" &>> $LOGFILE
echo "========================================================================" &>> $LOGFILE


# Mount target if necessary.
# TODO: Check if mounted already.
if [[ -n $MOUNTTARGETDEV ]]; then
	echo "Mounting $MOUNTTARGETDEV at $TARGET" &>> $LOGFILE
	mount $MOUNTTARGETDEV $TARGET &>> $LOGFILE
	if [[ $? -ne 0 ]]; then
		exitOnErr $?
	fi
	echo "========================================================================" &>> $LOGFILE
fi


# Save the package list.
echo "Replay your package list with the following command:" &>> $LOGFILE
case $PACKAGEMANAGER in
	yaourt)
		echo "yaourt -S --needed $(yaourt -Qeq | tr '\n' ' ')" &>> $LOGFILE
		;;
	pacman)
		# In contrast to the yaourt line, this one skips foreign packages, probably installed form AUR
		echo "pacman -S --needed $(pacman -Qqe | grep -vx "$(pacman -Qqm)" | tr '\n' ' ')" &>> $LOGFILE
		;;
	aptitude)
		echo "aptitude install $(aptitude search '~i !~M' | cut -d" " -f4 | sort -u | tr '\n' ' ')" &>> $LOGFILE
		;;
	apt)
		echo "apt-get install $(apt-mark showmanual | tr '\n' ' ')" &>> $LOGFILE
		;;
	*)
		echo "ERROR: Package manger not found."
		;;
esac
if [[ $? -ne 0 ]]; then
	exitOnErr $?
fi
echo "========================================================================" &>> $LOGFILE


# Handle includes / excludes.
if [[ -f $EXCLUDEFILE ]]; then
	EXCLUDE="--exclude-globbing-filelist $EXCLUDEFILE"
	echo "File includes/excludes:" &>> $LOGFILE
	cat $EXCLUDEFILE &>> $LOGFILE
	echo "========================================================================" &>> $LOGFILE
else
	EXCLUDE=""
fi


# Do the backup.
echo "rdiff-backup --backup-mode --print-statistics --verbosity 3 $EXCLUDE $SOURCE $TARGET" &>> $LOGFILE
rdiff-backup --backup-mode --print-statistics --verbosity 3 $EXCLUDE $SOURCE $TARGET &>> $LOGFILE
if [[ $? -ne 0 ]]; then
	exitOnErr $?
fi
echo "========================================================================" &>> $LOGFILE


# Remove backups older than the specified timeframe.
if [[ -n $KEEP ]]; then
	echo "rdiff-backup --print-statistics --verbosity 3 --remove-older-than $KEEP $TARGET" &>> $LOGFILE
	rdiff-backup --print-statistics --verbosity 3 --remove-older-than $KEEP $TARGET &>> $LOGFILE
	if [[ $? -ne 0 ]]; then
		exitOnErr $?
	fi
	echo "========================================================================" &>> $LOGFILE
fi


# Unmount target if necessary.
# TODO: Unmount only if not mounted previously.
if [[ -n $MOUNTTARGETDEV ]]; then
	echo "Unmounting $TARGET" &>> $LOGFILE
	sync
	umount $TARGET &>> $LOGFILE
	if [[ $? -ne 0 ]]; then
		exitOnErr $?
	fi
	echo "========================================================================" &>> $LOGFILE
fi


# Cleanup.
echo " Finished at `date`" &>> $LOGFILE
echo "========================================================================" &>> $LOGFILE

# Remove log file, if not set by the user.
if [[ $LOGFILE -eq "/tmp/drdbs.log" ]]; then
	rm $LOGFILE
fi

exit 0
